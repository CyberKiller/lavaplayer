plugins {
  id 'de.undercouch.download'
}

import org.apache.tools.ant.taskdefs.condition.Os

import java.util.regex.Pattern

apply plugin: 'de.undercouch.download'

apply from: 'natives.gradle'

ext.opusVersion = '1.3'
ext.mpg123Version = '1.25.10'
ext.oggVersion = '1.3.3'
ext.vorbisVersion = '1.3.6'
ext.sampleRateVersion = '0.1.9'
ext.fdkAacVersion = '2.0.0'

task load { doLast {
  if (!file("$projectDir/samplerate/src").exists()) {
    def downloadPath = "$buildDir/tmp/libsamplerate.tar.gz"
    def unpackPath = "$buildDir/tmp"

    download {
      src "http://www.mega-nerd.com/SRC/libsamplerate-${sampleRateVersion}.tar.gz"
      dest downloadPath
    }

    copy {
      from tarTree(resources.gzip(downloadPath))
      into unpackPath
    }

    copy {
      from "$unpackPath/libsamplerate-${sampleRateVersion}/src"
      into "$projectDir/samplerate/src"
    }
  }

  if (!file("$projectDir/fdk-aac/libAACdec").exists()) {
    def downloadPath = "$buildDir/tmp/fdk-aac-v${fdkAacVersion}.zip"
    def unpackPath = "$buildDir"

    download {
      src "https://github.com/mstorsjo/fdk-aac/archive/v${fdkAacVersion}.zip"
      dest downloadPath
    }

    copy {
      from zipTree(file(downloadPath))
      into unpackPath
    }

    copy {
      from "$unpackPath/fdk-aac-${fdkAacVersion}"
      into "$projectDir/fdk-aac"
    }
  }

  if (!file("$projectDir/vorbis/libogg-${oggVersion}").exists()) {
    def downloadPath = "$buildDir/tmp/temp.zip"
    def unpackPath = "$buildDir"

    download {
      src "http://downloads.xiph.org/releases/ogg/libogg-${oggVersion}.zip"
      dest downloadPath
    }

    copy {
      from zipTree(file(downloadPath))
      into "$projectDir/vorbis"
    }

    download {
      src "http://downloads.xiph.org/releases/vorbis/libvorbis-${vorbisVersion}.zip"
      dest downloadPath
    }

    copy {
      from zipTree(file(downloadPath))
      into "$projectDir/vorbis"
    }
  }

  if (!file("$projectDir/opus/opus-${opusVersion}").exists()) {
    def downloadPath = "$buildDir/tmp/temp.tar.gz"
    def unpackPath = "$buildDir"

    download {
      src "http://downloads.xiph.org/releases/opus/opus-${opusVersion}.tar.gz"
      dest downloadPath
    }

    copy {
      from tarTree(file(downloadPath))
      into "$projectDir/opus"
    }
  }

  if (!Os.isFamily(Os.FAMILY_WINDOWS) && !file("$projectDir/mp3/mpg123-${mpg123Version}").exists()) {
    def downloadPath = "$buildDir/tmp/temp.tar.bz2"
    def unpackPath = "$buildDir"

    download {
      src "https://www.mpg123.de/download/mpg123-${mpg123Version}.tar.bz2"
      dest downloadPath
    }

    copy {
      from tarTree(file(downloadPath))
      into "$projectDir/mp3"
    }
  }
}}

ext.devEnvPath = null

def getDevEnvLocation() {
  if (ext.devEnvPath == null) {
    def testDirectory = file("$buildDir/tmp/vsloc")
    testDirectory.deleteDir()
    testDirectory.mkdirs()

    new File(testDirectory, "CMakeLists.txt") << ""

    def outStream = new StringBuilder()
    def cmakeProcess = "cmake .".execute(null as String[], testDirectory)
    cmakeProcess.consumeProcessOutput(outStream, outStream)
    cmakeProcess.waitFor()

    def matcher = Pattern.compile("working C compiler: ([^\\n]*) -- works").matcher(outStream)
    matcher.find()

    def baseDirectory = file(matcher.group(1))

    while (!new File(baseDirectory, 'Common7').directory && baseDirectory.parentFile?.directory) {
      baseDirectory = baseDirectory.parentFile
    }

    ext.devEnvPath = new File(baseDirectory, "Common7/IDE/devenv.exe").absolutePath
  }

  return ext.devEnvPath
}

def buildOpusOnWindows(force) {
  def base = "$projectDir/libs/64"
  def libs = ['opus']
  def present = libs.every { file("${base}/${it}.lib").exists() }

  if (force || !present) {
    file(base).deleteDir()
    file(base).mkdirs()

    def devenv = getDevEnvLocation()
    def platformName = "x64"

    def process = [devenv, "opus.sln", "/Project", "opus", "/Build", "Release|${platformName}"].
        execute(null as String[], file("$projectDir/opus/opus-${opusVersion}/win32/VS2015"))

    process.waitForProcessOutput(System.out as Appendable, System.err)

    libs.each {
      assert file("$projectDir/opus/opus-${opusVersion}/win32/VS2015/${platformName}/Release/${it}.lib").renameTo("${base}/${it}.lib")
    }
  }
}

def waitForAndCheckSuccess(process, name) {
  process.waitForProcessOutput(System.out as Appendable, System.err)

  if (process.exitValue() != 0) {
    throw new IllegalStateException("${name} failed.")
  }
}

//Raspberry Pi autotools cross compile stuff
def getRpiToolchain() { 
  def toolchainHost = 'arm-linux-gnueabihf'
  def toolchainPath = System.env['HOME'] + '/raspberrypi/gcc-linaro-7.4.1-2019.02-x86_64_arm-linux-gnueabihf/bin'

  def CPP = "${toolchainPath}/${toolchainHost}-cpp"
  def CC = "${toolchainPath}/${toolchainHost}-gcc"
  def CXX = "${toolchainPath}/${toolchainHost}-g++"
  def LD = "${toolchainPath}/${toolchainHost}-ld"
  def AS = "${toolchainPath}/${toolchainHost}-as"
  def AR = "${toolchainPath}/${toolchainHost}-ar"
  def RANLIB = "${toolchainPath}/${toolchainHost}-ranlib"

  def sysRoot = System.env['HOME'] + '/raspberrypi/rootfs'
  def CPPFLAGS = "--sysroot=${sysRoot}"
  def PKG_CONFIG_LIBDIR = "${sysRoot}/usr/lib/arm-linux-gnueabihf/pkgconfig:${sysRoot}/usr/share/pkgconfig"
  
  return [
    args: ["CPPFLAGS=${CPPFLAGS}", "--host=${toolchainHost}",
      "PKG_CONFIG_DIR=", "PKG_CONFIG_LIBDIR=${PKG_CONFIG_LIBDIR}", "PKG_CONFIG_SYSROOT=${sysRoot}", 
      "CPP=${CPP}", "CC=${CC}", "CXX=${CXX}", "LD=${LD}", "AS=${AS}", "AR=${AR}", "RANLIB=${RANLIB}"
      ],
    flags: " --sysroot=${sysRoot}"
  ]
}

def rpiToolchain = getRpiToolchain()
//print rpiToolchain.toMapString() + "/n"

def buildOpusOnLinux(force) {
  def parameters = getBuildParameters('connector')
  def present = file("${projectDir}/libs/${parameters.identifier}/libopus.a").exists()

  if (force || !present) {
    def flags = "-fPIC -O3 -fdata-sections -ffunction-sections"
    if (System.env['RPI_CROSS_COMPILE'] != null) {
      flags += rpiToolchain['flags']
    }
    def args = ["./configure", "--enable-static", "--with-pic", "CFLAGS=${flags}", "CXXFLAGS=${flags}", "LDFLAGS=${flags}"]
    if (System.env['RPI_CROSS_COMPILE'] != null) {
      args.addAll(rpiToolchain['args'])
    } else if (Os.isArch('x86_64')) {
      args.add(2, '--with-cpu=x86-64')
    }
    def process = args.execute(null as String[], file("$projectDir/opus/opus-${opusVersion}"))
    

    waitForAndCheckSuccess(process, "Opus ./configure")

    process = ["make", "clean"].execute(null as String[], file("$projectDir/opus/opus-${opusVersion}"))
    waitForAndCheckSuccess(process, "Opus make clean")

    process = ["make"].execute(null as String[], file("$projectDir/opus/opus-${opusVersion}"))
    waitForAndCheckSuccess(process, "Opus make")

    copy {
      from "$projectDir/opus/opus-${opusVersion}/.libs/libopus.a"
      into "$projectDir/libs/${parameters.identifier}"
    }
  }
}

def extractVersionPrefix(fullVersion, partCount) {
  def parts = fullVersion.split('\\.').toList()
  return parts.subList(0, Math.min(partCount, parts.size())).join('.')
}

def replaceAutotoolsVersion(directory, originalVersion) {
  def localVersion = (['automake', '--version'].execute().text =~ /\(GNU automake\) ([0-9.]+)/)[0][1]
  def localMajorVersion = extractVersionPrefix(localVersion, 2)
  def originalMajorVersion = extractVersionPrefix(originalVersion, 2)

  [file("$directory/aclocal.m4"), file("$directory/configure")].each {
    it.text = it.text.replace("am__api_version='$originalMajorVersion'", "am__api_version='$localMajorVersion'").replace(originalVersion, localVersion)
  }
}

def buildMpg123OnLinux(force) {
  def parameters = getBuildParameters('connector')
  def present = file("${projectDir}/libs/${parameters.identifier}/libmpg123.a").exists()
  if (force || !present) {
    replaceAutotoolsVersion("$projectDir/mp3/mpg123-${mpg123Version}", '1.15.1')

    def flags = "-fPIC -O3 -fdata-sections -ffunction-sections"
    if (System.env['RPI_CROSS_COMPILE'] != null) {
      flags += rpiToolchain['flags']
    }
    def args = ['./configure', '--enable-static', '--with-pic', "CFLAGS=$flags", "CXXFLAGS=$flags"]
    if (System.env['RPI_CROSS_COMPILE'] != null) {
      args.addAll(rpiToolchain['args'])
    } else if (Os.isArch('x86_64')) {
      args.add(2, '--with-cpu=x86-64')
    }
    def process = args.execute(null as String[], file("$projectDir/mp3/mpg123-${mpg123Version}"))

    waitForAndCheckSuccess(process, "Mpg123 ./configure")

    process = ["make", "clean"].execute(null as String[], file("$projectDir/mp3/mpg123-${mpg123Version}"))
    waitForAndCheckSuccess(process, "make clean")

    process = ["make"].execute(null as String[], file("$projectDir/mp3/mpg123-${mpg123Version}"))
    waitForAndCheckSuccess(process, "make")

    copy {
      from "$projectDir/mp3/mpg123-${mpg123Version}/src/libmpg123/.libs/libmpg123.a"
      into "$projectDir/libs/${parameters.identifier}"
    }
  }
}

def prepareOggOnLinux(force) {
  def configured = file("$projectDir/vorbis/libogg-${oggVersion}/include/ogg/config_types.h").exists()

  if (force || !configured) {
    def args = ["./configure", "--enable-static", "--with-pic"]
    if (System.env['RPI_CROSS_COMPILE'] != null || Os.isArch('arm')) {
      args.add(2, "--build=armhf-pc-linux-gnu")
    } else if (Os.isArch('x86_64')) {
      args.add(2, "--build=x86_64-pc-linux-gnu")
    }
    def process = args.execute(null as String[], file("$projectDir/vorbis/libogg-${oggVersion}"))
    process.waitForProcessOutput(System.out as Appendable, System.err)
  }
}

def prepareBuilds(force) {
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    buildOpusOnWindows(force)
  } else {
    prepareOggOnLinux(force)
    buildOpusOnLinux(force)
    buildMpg123OnLinux(force)
  }
}

task compileNatives() { }
task checkNatives() { }

def buildTaskConfig = [
    buildBase: buildDir,
    projectBase: projectDir,
    deployBase: project(':natives-publish').projectDir,
    setupDependency: tasks.load,
    setupDoFirst: { config -> prepareBuilds(false) },
    compileTask: tasks.compileNatives,
    checkTask: tasks.checkNatives,
    name: 'connector'
]

createBuildTask(tasks, buildTaskConfig)
